/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MediBoomer {
  export type IntakeTimeStruct = { id: BigNumberish; time: string };

  export type IntakeTimeStructOutput = [id: bigint, time: string] & {
    id: bigint;
    time: string;
  };

  export type PrescriptionStruct = {
    id: BigNumberish;
    medicineId: BigNumberish;
    dose: string;
    isDelivered: boolean;
    timeDelivered: BigNumberish;
    duration: BigNumberish;
    intakeTimeList: MediBoomer.IntakeTimeStruct[];
  };

  export type PrescriptionStructOutput = [
    id: bigint,
    medicineId: bigint,
    dose: string,
    isDelivered: boolean,
    timeDelivered: bigint,
    duration: bigint,
    intakeTimeList: MediBoomer.IntakeTimeStructOutput[]
  ] & {
    id: bigint;
    medicineId: bigint;
    dose: string;
    isDelivered: boolean;
    timeDelivered: bigint;
    duration: bigint;
    intakeTimeList: MediBoomer.IntakeTimeStructOutput[];
  };

  export type MedicalRecipeStruct = {
    id: BigNumberish;
    doctorId: string;
    doctorName: string;
    prescriptions: BigNumberish[];
    createdAt: BigNumberish;
    status: BigNumberish;
  };

  export type MedicalRecipeStructOutput = [
    id: bigint,
    doctorId: string,
    doctorName: string,
    prescriptions: bigint[],
    createdAt: bigint,
    status: bigint
  ] & {
    id: bigint;
    doctorId: string;
    doctorName: string;
    prescriptions: bigint[];
    createdAt: bigint;
    status: bigint;
  };

  export type MedicineStruct = {
    id: BigNumberish;
    name: string;
    wamId: BigNumberish;
  };

  export type MedicineStructOutput = [
    id: bigint,
    name: string,
    wamId: bigint
  ] & { id: bigint; name: string; wamId: bigint };

  export type UserStruct = {
    id: string;
    name: string;
    email: string;
    contractAddress: AddressLike;
    userRole: BigNumberish;
    createdAt: BigNumberish;
    isExists: boolean;
  };

  export type UserStructOutput = [
    id: string,
    name: string,
    email: string,
    contractAddress: string,
    userRole: bigint,
    createdAt: bigint,
    isExists: boolean
  ] & {
    id: string;
    name: string;
    email: string;
    contractAddress: string;
    userRole: bigint;
    createdAt: bigint;
    isExists: boolean;
  };

  export type WaysAdministeringMedicinesStruct = {
    id: BigNumberish;
    name: string;
  };

  export type WaysAdministeringMedicinesStructOutput = [
    id: bigint,
    name: string
  ] & { id: bigint; name: string };
}

export interface MediBoomerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addIntakeTime"
      | "addMedicalRecipe"
      | "addMedicine"
      | "addUser"
      | "addWaysAdministeringMedicines"
      | "checkUpkeep"
      | "counter"
      | "deliverMedicalRecipe"
      | "getIntakeTimeList"
      | "getMedicalRecipe"
      | "getMedicineList"
      | "getPatientList"
      | "getPatientMedicalRecipeList"
      | "getPrescriptions"
      | "getUserInfo"
      | "getWamList"
      | "interval"
      | "lastTimeStamp"
      | "owner"
      | "performUpkeep"
      | "renounceOwnership"
      | "testDeliverMedicalRecipe"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "IntakeTimeAdded"
      | "MedicalRecipeAdded"
      | "MedicineAdded"
      | "OwnershipTransferred"
      | "PharmacistsDeliverMedicalRecipe"
      | "TakeMedicineAlarm"
      | "UserAdded"
      | "WamAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addIntakeTime",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addMedicalRecipe",
    values: [
      AddressLike,
      AddressLike,
      string,
      string,
      MediBoomer.PrescriptionStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addMedicine",
    values: [string, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addUser",
    values: [string, string, string, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addWaysAdministeringMedicines",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "counter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deliverMedicalRecipe",
    values: [AddressLike, BigNumberish, MediBoomer.PrescriptionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getIntakeTimeList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMedicalRecipe",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMedicineList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPatientList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPatientMedicalRecipeList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrescriptions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWamList",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "interval", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastTimeStamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testDeliverMedicalRecipe",
    values: [BigNumberish, MediBoomer.PrescriptionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addIntakeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMedicalRecipe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMedicine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWaysAdministeringMedicines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "counter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deliverMedicalRecipe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIntakeTimeList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMedicalRecipe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMedicineList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPatientList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPatientMedicalRecipeList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrescriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWamList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "interval", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testDeliverMedicalRecipe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace IntakeTimeAddedEvent {
  export type InputTuple = [userAddress: AddressLike, time: string];
  export type OutputTuple = [userAddress: string, time: string];
  export interface OutputObject {
    userAddress: string;
    time: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MedicalRecipeAddedEvent {
  export type InputTuple = [userAddress: AddressLike];
  export type OutputTuple = [userAddress: string];
  export interface OutputObject {
    userAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MedicineAddedEvent {
  export type InputTuple = [userAddress: AddressLike, name: string];
  export type OutputTuple = [userAddress: string, name: string];
  export interface OutputObject {
    userAddress: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PharmacistsDeliverMedicalRecipeEvent {
  export type InputTuple = [pharmacistAddress: AddressLike];
  export type OutputTuple = [pharmacistAddress: string];
  export interface OutputObject {
    pharmacistAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TakeMedicineAlarmEvent {
  export type InputTuple = [
    userAddress: AddressLike,
    medicineName: string,
    time: string,
    dose: string,
    wam: string
  ];
  export type OutputTuple = [
    userAddress: string,
    medicineName: string,
    time: string,
    dose: string,
    wam: string
  ];
  export interface OutputObject {
    userAddress: string;
    medicineName: string;
    time: string;
    dose: string;
    wam: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserAddedEvent {
  export type InputTuple = [userAddress: AddressLike, name: string];
  export type OutputTuple = [userAddress: string, name: string];
  export interface OutputObject {
    userAddress: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WamAddedEvent {
  export type InputTuple = [userAddress: AddressLike, name: string];
  export type OutputTuple = [userAddress: string, name: string];
  export interface OutputObject {
    userAddress: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MediBoomer extends BaseContract {
  connect(runner?: ContractRunner | null): MediBoomer;
  waitForDeployment(): Promise<this>;

  interface: MediBoomerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addIntakeTime: TypedContractMethod<
    [_time: string, userAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  addMedicalRecipe: TypedContractMethod<
    [
      _doctorAddress: AddressLike,
      _patientAddress: AddressLike,
      _doctorId: string,
      _doctorName: string,
      _prescriptionList: MediBoomer.PrescriptionStruct[]
    ],
    [void],
    "nonpayable"
  >;

  addMedicine: TypedContractMethod<
    [_name: string, _wamId: BigNumberish, userAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  addUser: TypedContractMethod<
    [
      _id: string,
      _name: string,
      _email: string,
      _contractAddress: AddressLike,
      _userRole: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  addWaysAdministeringMedicines: TypedContractMethod<
    [_name: string, userAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  checkUpkeep: TypedContractMethod<
    [checkData: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "nonpayable"
  >;

  counter: TypedContractMethod<[], [bigint], "view">;

  deliverMedicalRecipe: TypedContractMethod<
    [
      _pharmacistAddress: AddressLike,
      _medicalRecipeId: BigNumberish,
      _prescriptions: MediBoomer.PrescriptionStruct[]
    ],
    [void],
    "nonpayable"
  >;

  getIntakeTimeList: TypedContractMethod<
    [],
    [MediBoomer.IntakeTimeStructOutput[]],
    "view"
  >;

  getMedicalRecipe: TypedContractMethod<
    [_address: AddressLike, _medicalRecipeId: BigNumberish],
    [MediBoomer.MedicalRecipeStructOutput],
    "view"
  >;

  getMedicineList: TypedContractMethod<
    [],
    [MediBoomer.MedicineStructOutput[]],
    "view"
  >;

  getPatientList: TypedContractMethod<
    [],
    [MediBoomer.UserStructOutput[]],
    "view"
  >;

  getPatientMedicalRecipeList: TypedContractMethod<
    [_address: AddressLike],
    [MediBoomer.MedicalRecipeStructOutput[]],
    "view"
  >;

  getPrescriptions: TypedContractMethod<
    [_address: AddressLike, _medicalRecipeId: BigNumberish],
    [MediBoomer.PrescriptionStructOutput[]],
    "view"
  >;

  getUserInfo: TypedContractMethod<
    [userAddress: AddressLike],
    [MediBoomer.UserStructOutput],
    "view"
  >;

  getWamList: TypedContractMethod<
    [],
    [MediBoomer.WaysAdministeringMedicinesStructOutput[]],
    "view"
  >;

  interval: TypedContractMethod<[], [bigint], "view">;

  lastTimeStamp: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  performUpkeep: TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  testDeliverMedicalRecipe: TypedContractMethod<
    [
      _medicalRecipeId: BigNumberish,
      _prescriptions: MediBoomer.PrescriptionStruct[]
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addIntakeTime"
  ): TypedContractMethod<
    [_time: string, userAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addMedicalRecipe"
  ): TypedContractMethod<
    [
      _doctorAddress: AddressLike,
      _patientAddress: AddressLike,
      _doctorId: string,
      _doctorName: string,
      _prescriptionList: MediBoomer.PrescriptionStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addMedicine"
  ): TypedContractMethod<
    [_name: string, _wamId: BigNumberish, userAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addUser"
  ): TypedContractMethod<
    [
      _id: string,
      _name: string,
      _email: string,
      _contractAddress: AddressLike,
      _userRole: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addWaysAdministeringMedicines"
  ): TypedContractMethod<
    [_name: string, userAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkUpkeep"
  ): TypedContractMethod<
    [checkData: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "counter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deliverMedicalRecipe"
  ): TypedContractMethod<
    [
      _pharmacistAddress: AddressLike,
      _medicalRecipeId: BigNumberish,
      _prescriptions: MediBoomer.PrescriptionStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getIntakeTimeList"
  ): TypedContractMethod<[], [MediBoomer.IntakeTimeStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getMedicalRecipe"
  ): TypedContractMethod<
    [_address: AddressLike, _medicalRecipeId: BigNumberish],
    [MediBoomer.MedicalRecipeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMedicineList"
  ): TypedContractMethod<[], [MediBoomer.MedicineStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPatientList"
  ): TypedContractMethod<[], [MediBoomer.UserStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getPatientMedicalRecipeList"
  ): TypedContractMethod<
    [_address: AddressLike],
    [MediBoomer.MedicalRecipeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrescriptions"
  ): TypedContractMethod<
    [_address: AddressLike, _medicalRecipeId: BigNumberish],
    [MediBoomer.PrescriptionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserInfo"
  ): TypedContractMethod<
    [userAddress: AddressLike],
    [MediBoomer.UserStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWamList"
  ): TypedContractMethod<
    [],
    [MediBoomer.WaysAdministeringMedicinesStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "interval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastTimeStamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "performUpkeep"
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testDeliverMedicalRecipe"
  ): TypedContractMethod<
    [
      _medicalRecipeId: BigNumberish,
      _prescriptions: MediBoomer.PrescriptionStruct[]
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "IntakeTimeAdded"
  ): TypedContractEvent<
    IntakeTimeAddedEvent.InputTuple,
    IntakeTimeAddedEvent.OutputTuple,
    IntakeTimeAddedEvent.OutputObject
  >;
  getEvent(
    key: "MedicalRecipeAdded"
  ): TypedContractEvent<
    MedicalRecipeAddedEvent.InputTuple,
    MedicalRecipeAddedEvent.OutputTuple,
    MedicalRecipeAddedEvent.OutputObject
  >;
  getEvent(
    key: "MedicineAdded"
  ): TypedContractEvent<
    MedicineAddedEvent.InputTuple,
    MedicineAddedEvent.OutputTuple,
    MedicineAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PharmacistsDeliverMedicalRecipe"
  ): TypedContractEvent<
    PharmacistsDeliverMedicalRecipeEvent.InputTuple,
    PharmacistsDeliverMedicalRecipeEvent.OutputTuple,
    PharmacistsDeliverMedicalRecipeEvent.OutputObject
  >;
  getEvent(
    key: "TakeMedicineAlarm"
  ): TypedContractEvent<
    TakeMedicineAlarmEvent.InputTuple,
    TakeMedicineAlarmEvent.OutputTuple,
    TakeMedicineAlarmEvent.OutputObject
  >;
  getEvent(
    key: "UserAdded"
  ): TypedContractEvent<
    UserAddedEvent.InputTuple,
    UserAddedEvent.OutputTuple,
    UserAddedEvent.OutputObject
  >;
  getEvent(
    key: "WamAdded"
  ): TypedContractEvent<
    WamAddedEvent.InputTuple,
    WamAddedEvent.OutputTuple,
    WamAddedEvent.OutputObject
  >;

  filters: {
    "IntakeTimeAdded(address,string)": TypedContractEvent<
      IntakeTimeAddedEvent.InputTuple,
      IntakeTimeAddedEvent.OutputTuple,
      IntakeTimeAddedEvent.OutputObject
    >;
    IntakeTimeAdded: TypedContractEvent<
      IntakeTimeAddedEvent.InputTuple,
      IntakeTimeAddedEvent.OutputTuple,
      IntakeTimeAddedEvent.OutputObject
    >;

    "MedicalRecipeAdded(address)": TypedContractEvent<
      MedicalRecipeAddedEvent.InputTuple,
      MedicalRecipeAddedEvent.OutputTuple,
      MedicalRecipeAddedEvent.OutputObject
    >;
    MedicalRecipeAdded: TypedContractEvent<
      MedicalRecipeAddedEvent.InputTuple,
      MedicalRecipeAddedEvent.OutputTuple,
      MedicalRecipeAddedEvent.OutputObject
    >;

    "MedicineAdded(address,string)": TypedContractEvent<
      MedicineAddedEvent.InputTuple,
      MedicineAddedEvent.OutputTuple,
      MedicineAddedEvent.OutputObject
    >;
    MedicineAdded: TypedContractEvent<
      MedicineAddedEvent.InputTuple,
      MedicineAddedEvent.OutputTuple,
      MedicineAddedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PharmacistsDeliverMedicalRecipe(address)": TypedContractEvent<
      PharmacistsDeliverMedicalRecipeEvent.InputTuple,
      PharmacistsDeliverMedicalRecipeEvent.OutputTuple,
      PharmacistsDeliverMedicalRecipeEvent.OutputObject
    >;
    PharmacistsDeliverMedicalRecipe: TypedContractEvent<
      PharmacistsDeliverMedicalRecipeEvent.InputTuple,
      PharmacistsDeliverMedicalRecipeEvent.OutputTuple,
      PharmacistsDeliverMedicalRecipeEvent.OutputObject
    >;

    "TakeMedicineAlarm(address,string,string,string,string)": TypedContractEvent<
      TakeMedicineAlarmEvent.InputTuple,
      TakeMedicineAlarmEvent.OutputTuple,
      TakeMedicineAlarmEvent.OutputObject
    >;
    TakeMedicineAlarm: TypedContractEvent<
      TakeMedicineAlarmEvent.InputTuple,
      TakeMedicineAlarmEvent.OutputTuple,
      TakeMedicineAlarmEvent.OutputObject
    >;

    "UserAdded(address,string)": TypedContractEvent<
      UserAddedEvent.InputTuple,
      UserAddedEvent.OutputTuple,
      UserAddedEvent.OutputObject
    >;
    UserAdded: TypedContractEvent<
      UserAddedEvent.InputTuple,
      UserAddedEvent.OutputTuple,
      UserAddedEvent.OutputObject
    >;

    "WamAdded(address,string)": TypedContractEvent<
      WamAddedEvent.InputTuple,
      WamAddedEvent.OutputTuple,
      WamAddedEvent.OutputObject
    >;
    WamAdded: TypedContractEvent<
      WamAddedEvent.InputTuple,
      WamAddedEvent.OutputTuple,
      WamAddedEvent.OutputObject
    >;
  };
}
